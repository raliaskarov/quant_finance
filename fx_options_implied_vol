{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "81474e27",
   "metadata": {},
   "source": [
    "# calculating implied volatility for FX options"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71bcc57f",
   "metadata": {},
   "source": [
    "# Import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "id": "40f6405e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from math import exp, sqrt, log\n",
    "from scipy.stats import norm\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95b8bf37",
   "metadata": {},
   "source": [
    "# Defining Garman Kohlhagen model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "c43c4b57",
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining Garman Kohlhagen currency options pricing model\n",
    "\n",
    "class GarmanKolhagen:\n",
    "\n",
    "    def __init__(\n",
    "        self, asset_price, strike, tenor,\n",
    "        rate_local, rate_foreign, volatility, option_type):\n",
    "        self.asset_price = asset_price\n",
    "        self.strike = strike\n",
    "        self.rate_local = rate_local\n",
    "        self.rate_foreign = rate_foreign\n",
    "        self.volatility = volatility\n",
    "        self.option_type = option_type\n",
    "        self.price = self.garman_kohlhagen_price(asset_price, strike, tenor, \n",
    "                               rate_local, rate_foreign, \n",
    "                               volatility, option_type)\n",
    "        self.vega = self.vega(asset_price, strike, \n",
    "              tenor, rate_local, rate_foreign, volatility)\n",
    "        \n",
    "    def garman_kohlhagen_price(self, asset_price, strike, tenor, \n",
    "                               rate_local, rate_foreign, \n",
    "                               volatility, option_type):\n",
    "        d1 = ((log(asset_price/strike) \n",
    "               + (rate_local - rate_foreign + 0.5 * volatility ** 2)*tenor) \n",
    "              / volatility * (tenor**0.5))\n",
    "        d2 = d1 - volatility * (tenor ** 0.5)\n",
    "\n",
    "        gk_call_price = (asset_price * exp(-rate_foreign * tenor) * norm.cdf(d1, 0, 1) \n",
    "                         - strike * exp(-rate_local * tenor) * norm.cdf(d2, 0, 1))\n",
    "        \n",
    "        gk_put_price = (strike * exp(-rate_local * tenor) * norm.cdf(-d2)\n",
    "                        - asset_price * exp(-rate_foreign) * norm.cdf(-d1))\n",
    "\n",
    "        if option_type == 'call':\n",
    "            price = gk_call_price\n",
    "        else:\n",
    "            price = gk_put_price\n",
    "        return price\n",
    "    \n",
    "    def vega (self, asset_price, strike, \n",
    "              tenor, rate_local, rate_foreign, volatility):\n",
    "        d1 = ((log(asset_price/strike) + \n",
    "               (rate_local - rate_foreign + 0.5 * volatility ** 2)*tenor)\n",
    "              / volatility * (tenor)**0.5)\n",
    "        vega = float(asset_price * norm.pdf(d1) * tenor ** 0.5)\n",
    "        return vega\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "id": "8899c46b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16.723156536997386"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "efxcall = GarmanKolhagen(82, 95, 180/365, 0.07, 0.01, 0.9, 'call' )\n",
    "efxcall.price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "id": "ae61a4d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22.925634986430364"
      ]
     },
     "execution_count": 296,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "efxcall.vega"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0b52095",
   "metadata": {},
   "source": [
    "# Defining implied volatility formula"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "id": "e13441f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def implied_volatility(true_price, asset_price, strike, tenor,\n",
    "                      rate_local, rate_foreign, option_type):\n",
    "    max_iterations = 1000\n",
    "    max_vol_update = 0.001\n",
    "    accuracy = 1.0e-2\n",
    "    # set default implied volatility\n",
    "    implied_vol = 0.2\n",
    "\n",
    "    european_fx_call = GarmanKolhagen (asset_price, strike, tenor, \n",
    "                        rate_local, rate_foreign, implied_vol, option_type)\n",
    "    \"\"\"\n",
    "    # check if solution exists\n",
    "    if european_fx_call.price > true_price:\n",
    "        print (\"No feasible solution for strike\", strike)\n",
    "        return accuracy\n",
    "    \"\"\"\n",
    "#    print(\"model_price, implied_vol, diff, vega, implied_vol_djustment\")\n",
    "\n",
    "    for i in range(max_iterations):\n",
    "        european_fx_call = GarmanKolhagen (asset_price, strike, tenor, \n",
    "                            rate_local, rate_foreign, implied_vol, option_type)\n",
    "        model_price = european_fx_call.price\n",
    "        diff = float(model_price - true_price)\n",
    "        \n",
    "        if (abs(diff) < accuracy):\n",
    "            return implied_vol\n",
    "        \n",
    "        vega = european_fx_call.vega\n",
    "        \n",
    "        try:\n",
    "            adj = diff/vega\n",
    "        except ZeroDivisionError:\n",
    "            adj = 0\n",
    "        \n",
    "        implied_vol_adjustment = np.clip(adj, -max_vol_update, max_vol_update)\n",
    " #       print(model_price, implied_vol, diff, vega, implied_vol_adjustment) #use for debugging        \n",
    "\n",
    "        implied_vol = max(implied_vol - implied_vol_adjustment, 0.0001)\n",
    "        \n",
    "    return implied_vol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "2300e6d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.32271239055185386"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check that implied volatility formula works\n",
    "implied_volatility(3.8777948528303625, 82, 95, 180/356, 0.07, 0, 'call')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "963cc962",
   "metadata": {},
   "source": [
    "# Uploading data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "id": "4dba1318",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>option_type</th>\n",
       "      <th>strike</th>\n",
       "      <th>price</th>\n",
       "      <th>implied_vol_quoted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>call</td>\n",
       "      <td>1.055</td>\n",
       "      <td>0.07870</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>put</td>\n",
       "      <td>1.055</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>call</td>\n",
       "      <td>1.060</td>\n",
       "      <td>0.07370</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>put</td>\n",
       "      <td>1.060</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>call</td>\n",
       "      <td>1.065</td>\n",
       "      <td>0.06870</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  option_type  strike    price  implied_vol_quoted\n",
       "0        call   1.055  0.07870                 NaN\n",
       "1         put   1.055  0.00005                 NaN\n",
       "2        call   1.060  0.07370                 NaN\n",
       "3         put   1.060  0.00005                 NaN\n",
       "4        call   1.065  0.06870                 NaN"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# upload options data for implied vol calculation\n",
    "data = pd.read_csv(\"implied_vol_input.csv\", delimiter = ';')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "0ea1c581",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create lits of prices, strikes, option types, quoted implied vol\n",
    "market_prices = data[\"price\"]\n",
    "strikes = data[\"strike\"]\n",
    "option_types = data[\"option_type\"]\n",
    "implied_vols_quoted = data[\"implied_vol_quoted\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff6a3a24",
   "metadata": {},
   "source": [
    "# Running implied volatility simulations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "id": "dcd001d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set underlying spot price, tenor and rates\n",
    "asset_price = 1.13370\n",
    "tenor = 1\n",
    "rate_local = 0.002\n",
    "rate_foreign = 0.000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "e115b353",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create list where  computed implied volatilities will be added \n",
    "implied_vols = [0]*len(strikes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "93f5ab28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "calculation completed at 01/12/2021 13:23:28\n"
     ]
    }
   ],
   "source": [
    "# calculate implied volatilities\n",
    "for i in range(len(market_prices)):\n",
    "    market_price = market_prices[i]\n",
    "    strike = strikes[i]\n",
    "    option_type = option_types[i]\n",
    "    implied_vol_quoted = implied_vols_quoted[i]\n",
    "    implied_vol = implied_volatility(market_price, asset_price,\n",
    "                                     strike, tenor,\n",
    "                                    rate_local, rate_foreign, option_type)\n",
    "    implied_vols[i] = implied_vol\n",
    "print(\"calculation completed at\", datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "cbcef53e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saved on 01/12/2021 13:23:28\n"
     ]
    }
   ],
   "source": [
    "# add computed implied volatilities to input dataframe\n",
    "data_output = data\n",
    "data_output[\"implied_vol_computed\"] = implied_vols\n",
    "data_output\n",
    "data_output.to_excel(\"implied_volatilities_output.xlsx\")\n",
    "print(\"saved on\", datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "07ccb304",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>option_type</th>\n",
       "      <th>strike</th>\n",
       "      <th>price</th>\n",
       "      <th>implied_vol_quoted</th>\n",
       "      <th>implied_vol_computed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>call</td>\n",
       "      <td>1.055</td>\n",
       "      <td>0.07870</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>put</td>\n",
       "      <td>1.055</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>call</td>\n",
       "      <td>1.060</td>\n",
       "      <td>0.07370</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>put</td>\n",
       "      <td>1.060</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>call</td>\n",
       "      <td>1.065</td>\n",
       "      <td>0.06870</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  option_type  strike    price  implied_vol_quoted  implied_vol_computed\n",
       "0        call   1.055  0.07870                 NaN                 0.078\n",
       "1         put   1.055  0.00005                 NaN                 0.085\n",
       "2        call   1.060  0.07370                 NaN                 0.074\n",
       "3         put   1.060  0.00005                 NaN                 0.082\n",
       "4        call   1.065  0.06870                 NaN                 0.071"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "f54c2a77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">price</th>\n",
       "      <th colspan=\"2\" halign=\"left\">implied_vol_quoted</th>\n",
       "      <th colspan=\"2\" halign=\"left\">implied_vol_computed</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>option_type</th>\n",
       "      <th>call</th>\n",
       "      <th>put</th>\n",
       "      <th>call</th>\n",
       "      <th>put</th>\n",
       "      <th>call</th>\n",
       "      <th>put</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>strike</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.055</th>\n",
       "      <td>0.0787</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.078</td>\n",
       "      <td>0.085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.060</th>\n",
       "      <td>0.0737</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.074</td>\n",
       "      <td>0.082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.065</th>\n",
       "      <td>0.0687</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.071</td>\n",
       "      <td>0.078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.070</th>\n",
       "      <td>0.0637</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.068</td>\n",
       "      <td>0.075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.075</th>\n",
       "      <td>0.0587</td>\n",
       "      <td>0.00005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.064</td>\n",
       "      <td>0.071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              price          implied_vol_quoted     implied_vol_computed  \\\n",
       "option_type    call      put               call put                 call   \n",
       "strike                                                                     \n",
       "1.055        0.0787  0.00005                NaN NaN                0.078   \n",
       "1.060        0.0737  0.00005                NaN NaN                0.074   \n",
       "1.065        0.0687  0.00005                NaN NaN                0.071   \n",
       "1.070        0.0637  0.00005                NaN NaN                0.068   \n",
       "1.075        0.0587  0.00005                NaN NaN                0.064   \n",
       "\n",
       "                    \n",
       "option_type    put  \n",
       "strike              \n",
       "1.055        0.085  \n",
       "1.060        0.082  \n",
       "1.065        0.078  \n",
       "1.070        0.075  \n",
       "1.075        0.071  "
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert table so that there are call and put values for each strike\n",
    "data_output = data.pivot(index = \"strike\", columns = \"option_type\")\n",
    "data_output.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "4f9c0fa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saved on 01/12/2021 13:23:28\n"
     ]
    }
   ],
   "source": [
    "data_output.to_excel(\"implied_volatilities_output_view2.xlsx\")\n",
    "print(\"saved on\", datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b76fdec",
   "metadata": {},
   "source": [
    "# Building plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "4b58140b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def two_lines_plot(y1_values, y2_values, x_values, y1_label, y2_label, title, x_axis, y_axis):\n",
    "    plt.plot(x_values, y1_values, label = y1_label)\n",
    "    plt.plot(x_values, y2_values, label = y2_label)\n",
    "    plt.legend(loc = \"upper left\")\n",
    "    plt.title(title)\n",
    "    plt.xlabel(x_axis)\n",
    "    plt.ylabel(y_axis)\n",
    "    plt.xticks()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "0eac3a38",
   "metadata": {},
   "outputs": [],
   "source": [
    "y1 = data_output[\"implied_vol_computed\"][\"call\"]\n",
    "y2 = data_output[\"implied_vol_computed\"][\"put\"]\n",
    "x = data_output.index.to_frame()[\"strike\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "c9e1807b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "two_lines_plot(y1, y2, x, \n",
    "               \"call\", \"put\",\n",
    "              \"Implied volatility chart\",\n",
    "              \"Strike\",\n",
    "              \"Volatility\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5526025d",
   "metadata": {},
   "source": [
    "# Implied volatility debugging cockpit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "2d63edc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "v = 0.035126268"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "id": "339484e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.04817593450098856"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eurusdcall = GarmanKolhagen(1.13370, 1.09, 365/365, 0.002, 0.0, v, 'call' )\n",
    "p = eurusdcall.price\n",
    "p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "id": "76b2b5e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.22184793902009387"
      ]
     },
     "execution_count": 313,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vega = eurusdcall.vega\n",
    "vega"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "12932e9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.040324065499011436"
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff = abs(p-.0885)\n",
    "diff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "id": "fb1c70f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    float(vega)/float(diff)\n",
    "except ZeroDivisionError:\n",
    "    print(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "48d13cdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.01"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adj = np.clip(diff/vega, -.01, .01)\n",
    "adj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "c8a78b68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.025126268"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v = max(v-adj,0.001)\n",
    "v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "a8e26aa1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.04399999999999987"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "implied_volatility(0.0885, 1.1325, 1.05, 365/365, 0.015, 0.0, 'call')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
